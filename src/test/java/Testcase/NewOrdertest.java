package Testcase;

import Base.BaseSetup;
import Model.HistoryDP;
import Model.OrderDataModel;
import Page.Loginpage;
import Page.NewOrderPage;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.Assert;
import org.testng.annotations.*;

import java.time.Duration;

public class NewOrdertest extends BaseSetup {
    private WebDriver driver;
    private Loginpage loginpage;
    private NewOrderPage newOrderpage;

    @BeforeClass
    @Parameters({"browserType", "appURL"})
    public void setUp(String browserType, String appURL) {
        createDriver(browserType, appURL);
        driver = getDriver();

    }

    @Test(priority = 1)
    public void LoginSuccess() {
        loginpage = new Loginpage(driver);
        loginpage.login("50000200", "8uJbAf-p", "Axi-US50-Demo");
        String pageTitle = driver.getTitle();
        System.out.println("Title sau khi ƒëƒÉng nh·∫≠p: " + pageTitle);
        Assert.assertTrue(pageTitle.contains("XTrade"), "ƒêƒÉng nh·∫≠p th√†nh c√¥ng v√†o Dashboard");
    }

    @Test(dataProvider = "orderData", dataProviderClass = HistoryDP.class, priority = 2)
    public void testCreateNewOrder(OrderDataModel data) throws InterruptedException {
        NewOrderPage orderPage = new NewOrderPage(driver);
        orderPage.openmenuOrder();
        orderPage.clickResetButton();
        if (!data.getSymbol().isEmpty()) {
            orderPage.selectDropdownByLabel(driver, "Symbol", data.getSymbol());
            orderPage.waitForDropdownSettled("Symbol");
        }

        orderPage.selectMarketExecutionOption(driver, data.getOrderMode());
        if (data.getOrderType() != null) {
            orderPage.selectDropdownByLabel(driver, "Order Type", data.getOrderType());
            orderPage.waitForDropdownSettled("Order Type");
        } else {
            System.out.println("‚ö†Ô∏è Order Type kh√¥ng ƒë∆∞·ª£c cung c·∫•p ‚Äî b·ªè qua ch·ªçn dropdown.");
        }

        if (data.getVolume() != null)
        {
        orderPage.waitForInputReady("Volume");
        orderPage.enterInputByLabel(driver, "Volume", data.getVolume());
        }
        else
        {
                System.out.println("‚ö†Ô∏è Volume kh√¥ng ƒë∆∞·ª£c cung c·∫•p ‚Äî b·ªè qua ch·ªçn Volume.");
        }

        // ‚úÖ Ch·ªâ x·ª≠ l√Ω gi√° khi l√† "Market Execution"
        if ("Pending Order".equalsIgnoreCase(data.getOrderMode())) {
            if (data.getPrice() != null) {
                orderPage.waitForInputReady("Price");

                if (data.getPrice() != 0) {
                    // ‚úÖ Nh·∫≠p gi√° tr·ª±c ti·∫øp
                    orderPage.enterInputByLabel(driver, "Price", String.valueOf(data.getPrice()));
                } else {
                    // ‚úÖ Price = 0, ch·ªçn tƒÉng ho·∫∑c gi·∫£m t√πy theo OrderMode
                    if (data.getOrderMode() != null && data.getOrderMode().contains("By")) {
                        orderPage.increasePriceByArrowDown(driver);
                    } else {
                        orderPage.increasePriceByArrowUp(driver);
                    }
                }
            } else {
                System.out.println("‚ö†Ô∏è Price kh√¥ng ƒë∆∞·ª£c cung c·∫•p ‚Äî b·ªè qua nh·∫≠p gi√° Price.");
            }

        }

        if ("Market Execution".equalsIgnoreCase(data.getOrderMode())) {
            if (data.getFillPolicy() != null) {
                orderPage.selectDropdownByLabel(driver, "Fill Policy", data.getFillPolicy());
                orderPage.waitForDropdownSettled("Fill Policy");
            }
            else {
                System.out.println("‚ö†Ô∏è Policy kh√¥ng ƒë∆∞·ª£c cung c·∫•p ‚Äî b·ªè qua nh·∫≠p gi√° Policy.");
            }
        }

    /*
    if (data.getFillPolicy() != null) {
        orderPage.selectDropdownByLabel(driver, "Fill Policy", data.getFillPolicy());
        waitForDropdownSettled("Fill Policy");
    }
    */

        orderPage.submitOrder();
        String alert = orderPage.getAlertMessage();

        System.out.println("üßæ Alert Message: " + alert);

        if (data.isExpectSuccess()) {
            Assert.assertNotNull(alert, "K·ª≥ v·ªçng th√†nh c√¥ng nh∆∞ng kh√¥ng c√≥ th√¥ng b√°o.");
            Assert.assertTrue(alert.contains("Order created successfully"), "K·ª≥ v·ªçng th√†nh c√¥ng nh∆∞ng th√¥ng b√°o l√†: " + alert);
        } else {
            Assert.assertNotNull(alert, "K·ª≥ v·ªçng th·∫•t b·∫°i nh∆∞ng kh√¥ng c√≥ th√¥ng b√°o l·ªói.");

            boolean isFormError = alert.contains("Please enter")
                    || alert.contains("is required")
                    || alert.contains("Please select");

            boolean isServerError = alert.contains("Order send failed")
                    || alert.contains("retcode");

            Assert.assertTrue(
                    isFormError || isServerError,
                    "K·ª≥ v·ªçng th·∫•t b·∫°i nh∆∞ng nh·∫≠n ƒë∆∞·ª£c th√¥ng b√°o kh√¥ng x√°c ƒë·ªãnh ho·∫∑c th√†nh c√¥ng: " + alert
            );

    }
    }


   /* @Test(dataProvider = "orderData")
    public void testCreateOrder(OrderDataModel data) throws InterruptedException {
        newOrderPage.selectDropdownByLabel("Symbol", data.getSymbol());
        newOrderPage.selectDropdownByLabel("Order Mode", data.getOrderMode());
        newOrderPage.selectDropdownByLabel("Order Type", data.getOrderType());
        newOrderPage.enterInputByLabel("Volume", data.getVolume());
        newOrderPage.enterInputByLabel("Price", data.getPrice());
        newOrderPage.selectDropdownByLabel("Fill Policy", data.getFillPolicy());

        newOrderPage.submitOrder();

        String alert = newOrderPage.getAlertMessage();
        if (data.isExpectSuccess()) {
            Assert.assertTrue(alert.contains("th√†nh c√¥ng"), "K·ª≥ v·ªçng th√†nh c√¥ng nh∆∞ng nh·∫≠n: " + alert);
        } else {
            Assert.assertTrue(alert != null && !alert.isEmpty(), "K·ª≥ v·ªçng c√≥ th√¥ng b√°o l·ªói nh∆∞ng kh√¥ng th·∫•y.");
        }
    }*/

/*
    @Test( priority = 1)
    public void NewOrder() throws InterruptedException {
        newOrderpage = new NewOrderpage(driver);
        newOrderpage.Order();
        System.out.println("create Success");
    }*/

    @AfterClass
    public void tearDown() {
        quitDriver();  // quit driver an to√†n nh∆∞ tr√™n
    }
}
